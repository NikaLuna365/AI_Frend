# /docker-compose.yml (Версия 2025-05-03 - Проверены команды Celery)

services:
  # --- База Данных PostgreSQL ---
  db:
    image: postgres:15-alpine
    container_name: aifriend-db
    environment:
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: StrongPass
      POSTGRES_DB: ai_drug
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # --- Redis (Брокер Celery / Кэш) ---
  redis:
    image: redis:7-alpine
    container_name: aifriend-redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # --- Сервис Миграции (Автоматический Запуск) ---
  migrate:
    container_name: aifriend-migrate
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        echo 'Migrate service started. Waiting for DB...' &&
        until pg_isready -h db -U ai_user -d ai_drug -q; do
          echo 'DB is unavailable - sleeping';
          sleep 1;
        done &&
        echo 'DB is ready!' &&
        echo 'Attempting to autogenerate migration (if models changed)...' &&
        alembic -c /app/alembic.ini revision --autogenerate -m 'auto-generated changes' &&
        echo 'Applying migrations (upgrade head)...' &&
        alembic -c /app/alembic.ini upgrade head &&
        echo 'Migrations finished successfully.'
      "
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_started # Зависим только от старта БД
    restart: 'no'

  # --- Веб-сервер FastAPI ---
  web:
    container_name: aifriend-web
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      # Не зависим явно от migrate, т.к. он должен отработать до старта БД healthcheck
    restart: unless-stopped

  # --- Celery Worker ---
  celery:
    container_name: aifriend-celery
    build:
      context: .
      dockerfile: Dockerfile
    # --- ПРОВЕРЕННАЯ КОМАНДА ЗАПУСКА ---
    # -A указывает путь к модулю:объекту приложения Celery
    command: ["celery", "-A", "app.workers.tasks:celery_app", "worker", "--loglevel=info"]
    # ------------------------------------
    volumes:
      - .:/app
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      # Не зависим явно от migrate
    restart: unless-stopped

  # --- Celery Beat (Планировщик) ---
  celery-beat:
    container_name: aifriend-celery-beat
    build:
      context: .
      dockerfile: Dockerfile
    # --- ПРОВЕРЕННАЯ КОМАНДА ЗАПУСКА ---
    # -A указывает путь к модулю:объекту приложения Celery
    # --scheduler опционально, если нужен кастомный планировщик
    command: ["celery", "-A", "app.workers.tasks:celery_app", "beat", "--loglevel=info"]
    # ------------------------------------
    volumes:
      - .:/app
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      # Не зависим явно от migrate
    restart: unless-stopped

# --- Named Volumes ---
volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
