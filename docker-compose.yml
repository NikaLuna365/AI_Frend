# /opt/ai-friend/docker-compose.yml (Исправленная версия с credentials, без монтирования кода)

services:
  db:
    image: postgres:15-alpine
    container_name: aifriend-db
    environment:
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: StrongPass
      POSTGRES_DB: ai_drug
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck: {test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q"], interval: 5s, timeout: 3s, retries: 5, start_period: 10s}
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: aifriend-redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    healthcheck: {test: ["CMD", "redis-cli", "ping"], interval: 5s, timeout: 3s, retries: 3, start_period: 5s}
    restart: unless-stopped

  migrate:
    container_name: aifriend-migrate
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        echo 'Migrate: Waiting for DB...' &&
        until pg_isready -h db -U ai_user -d ai_drug -q; do sleep 1; done &&
        echo 'Migrate: DB ready!' &&
        echo 'Migrate: Autogenerating (if needed)...' &&
        alembic -c /app/alembic.ini revision --autogenerate -m 'auto-generated on startup' &&
        echo 'Migrate: Applying migrations...' &&
        alembic -c /app/alembic.ini upgrade head &&
        echo 'Migrate: Finished.'
      "
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_started
    # --- Монтируем credentials, если они нужны на этапе миграции (маловероятно) ---
    volumes:
      - ./credentials:/app/credentials:ro
    restart: 'no'

  web:
    container_name: aifriend-web
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    # volumes:
    #   - .:/app # <-- ЗАКОММЕНТИРОВАНО/УДАЛЕНО
    volumes: # <-- МОНТИРУЕМ ТОЛЬКО CREDENTIALS
      - ./credentials:/app/credentials:ro
    ports:
      - "8000:8000"
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery:
    container_name: aifriend-celery
    build:
      context: .
      dockerfile: Dockerfile
    command: ["celery", "-A", "app.workers.tasks:celery_app", "worker", "--loglevel=info"]
    # volumes:
    #   - .:/app # <-- ЗАКОММЕНТИРОВАНО/УДАЛЕНО
    volumes: # <-- МОНТИРУЕМ ТОЛЬКО CREDENTIALS
      - ./credentials:/app/credentials:ro
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery-beat:
    container_name: aifriend-celery-beat
    build:
      context: .
      dockerfile: Dockerfile
    command: ["celery", "-A", "app.workers.tasks:celery_app", "beat", "--loglevel=info"]
    # volumes:
    #   - .:/app # <-- ЗАКОММЕНТИРОВАНО/УДАЛЕНО
    volumes: # <-- МОНТИРУЕМ ТОЛЬКО CREDENTIALS
      - ./credentials:/app/credentials:ro
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  db_data: {driver: local}
  redis_data: {driver: local}
