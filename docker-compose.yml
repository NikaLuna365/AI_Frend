# /docker-compose.yml (Версия с открытым портом DB для генерации миграций на хосте)

# version: '3.8' # Убрано как устаревшее

services:
  db:
    image: postgres:15-alpine
    container_name: aifriend-db
    environment:
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: StrongPass
      POSTGRES_DB: ai_drug
    volumes:
      - db_data:/var/lib/postgresql/data
    # --- ВАЖНО: Открываем порт БД на хост ---
    ports:
      - "5432:5432" # Маппим порт 5432 контейнера на 5432 хоста
    # -----------------------------------------
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: aifriend-redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    # ports: # Не открываем порт Redis, если не нужен доступ с хоста
    #   - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  migrate:
    container_name: aifriend-migrate
    build:
      context: .
      dockerfile: Dockerfile
    # Эта команда будет использоваться для ПРИМЕНЕНИЯ миграций
    command: ["alembic", "-c", "alembic.ini", "upgrade", "head"]
    env_file:
      - .env.${ENVIRONMENT} # Передаем окружение
    depends_on:
      db:
        condition: service_healthy
    restart: 'no'

  web:
    container_name: aifriend-web
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"] # Убрали --reload
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      # Зависим от УСПЕШНОГО ЗАВЕРШЕНИЯ migrate, если будем запускать его через 'up'
      # migrate:
      #   condition: service_completed_successfully
      # Но т.к. migrate будем запускать через 'run', web должен зависеть от db
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # healthcheck: # Оставляем закомментированным
    restart: unless-stopped

  celery:
    container_name: aifriend-celery
    build:
      context: .
      dockerfile: Dockerfile
    command: ["celery", "-A", "app.workers.tasks:celery_app", "worker", "--loglevel=info"]
    volumes:
      - .:/app
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      # migrate: # Зависимость от migrate убираем, т.к. он запускается отдельно
      #   condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery-beat:
    container_name: aifriend-celery-beat
    build:
      context: .
      dockerfile: Dockerfile
    command: ["celery", "-A", "app.workers.tasks:celery_app", "beat", "--loglevel=info"]
    volumes:
      - .:/app
    env_file:
      - .env.${ENVIRONMENT}
    depends_on:
      # migrate: # Зависимость от migrate убираем
      #   condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
