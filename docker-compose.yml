# /docker-compose.yml (Версия для Фазы 2 - добавлены volumes credentials)

services:
  db:
    # ... (без изменений, порт НЕ проброшен) ...
    image: postgres:15-alpine
    container_name: aifriend-db
    environment: [POSTGRES_USER: ai_user, POSTGRES_PASSWORD: StrongPass, POSTGRES_DB: ai_drug]
    volumes: [db_data:/var/lib/postgresql/data]
    healthcheck: {test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q"], interval: 5s, timeout: 3s, retries: 5, start_period: 10s}
    restart: unless-stopped

  redis:
    # ... (без изменений, порт НЕ проброшен) ...
    image: redis:7-alpine
    container_name: aifriend-redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes: [redis_data:/data]
    healthcheck: {test: ["CMD", "redis-cli", "ping"], interval: 5s, timeout: 3s, retries: 3, start_period: 5s}
    restart: unless-stopped

  migrate:
    # ... (без изменений) ...
    container_name: aifriend-migrate
    build: {context: ., dockerfile: Dockerfile}
    command: >
      sh -c "..." 
    env_file: [- .env.${ENVIRONMENT}]
    depends_on: {db: {condition: service_started}}
    volumes:
      # --- ДОБАВЛЯЕМ credentials (на всякий случай, если env.py его косвенно использует) ---
      - ./credentials:/app/credentials:ro
    restart: 'no'

  web:
    # ... (без --reload, порт 8000 открыт) ...
    container_name: aifriend-web
    build: {context: ., dockerfile: Dockerfile}
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    volumes:
      - .:/app
      # --- ДОБАВЛЯЕМ credentials ---
      - ./credentials:/app/credentials:ro
    ports: ["8000:8000"]
    env_file: [- .env.${ENVIRONMENT}]
    depends_on: {db: {condition: service_healthy}, redis: {condition: service_healthy}}
    # healthcheck: # Закомментирован
    restart: unless-stopped

  celery:
    # ... (команда запуска стандартная) ...
    container_name: aifriend-celery
    build: {context: ., dockerfile: Dockerfile}
    command: ["celery", "-A", "app.workers.tasks:celery_app", "worker", "--loglevel=info"]
    volumes:
      - .:/app
      # --- ДОБАВЛЯЕМ credentials ---
      - ./credentials:/app/credentials:ro
    env_file: [- .env.${ENVIRONMENT}]
    depends_on: {db: {condition: service_healthy}, redis: {condition: service_healthy}}
    restart: unless-stopped

  celery-beat:
    # ... (команда запуска стандартная) ...
    container_name: aifriend-celery-beat
    build: {context: ., dockerfile: Dockerfile}
    command: ["celery", "-A", "app.workers.tasks:celery_app", "beat", "--loglevel=info"]
    volumes:
      - .:/app
      # --- ДОБАВЛЯЕМ credentials (если вдруг задачи beat вызывают Google API) ---
      - ./credentials:/app/credentials:ro
    env_file: [- .env.${ENVIRONMENT}]
    depends_on: {db: {condition: service_healthy}, redis: {condition: service_healthy}}
    restart: unless-stopped

volumes:
  db_data: {driver: local}
  redis_data: {driver: local}
